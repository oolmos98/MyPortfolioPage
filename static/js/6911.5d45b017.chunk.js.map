{"version":3,"file":"static/js/6911.5d45b017.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/Linker.js"],"sourcesContent":["import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            const { CircleWarp } = await import(\"./CircleWarp.js\");\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["origin","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","getDistances","dx","dy","distance","absDiffs","x","Math","abs","y","warpDistances","min","width","height","sqrt","Linker","container","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","undefined","id","particles","linksColor","linksColors","get","optColor","color","getLinkRandomColor","blink","consent","set","this","Map","getPosition","canvas","size","linkOpt1","optOpacity","opacity","retina","linksDistance","CircleWarp","range","Circle","query","quadTree","p2","linkOpt2","enable","spawning","destroyed","some","t","destination","opacityLine","push","particle","Links","sources","source","load","ParticlesInteractorBase"],"sourceRoot":""}