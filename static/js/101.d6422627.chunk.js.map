{"version":3,"file":"static/js/101.d6422627.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    async draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            await canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        await canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    async init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                await this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            await effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            await shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            await updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            await mover.init?.(this);\n        }\n        await effectDrawer?.particleInit?.(container, this);\n        await shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n"],"names":["half","loadEffectData","effect","effectOptions","id","reduceDuplicates","effectData","options","deepExtend","close","fill","itemFromSingleOrMultiple","loadShapeData","shape","shapeOptions","shapeData","fixOutMode","data","isInArray","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","engine","container","this","_calcPosition","position","zIndex","tryCount","plugins","plugin","pluginPos","undefined","particlePosition","Vector3d","x","y","canvasSize","canvas","size","exactPosition","calcExactPositionOrRandomFromSize","pos","getRadius","outModes","move","fixHorizontal","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","increment","_calculateVelocity","res","getParticleBaseVelocity","direction","copy","moveOptions","rad","degToRad","getRangeValue","angle","radOffset","offset","range","straight","randomInRange","setRangeValue","random","speed","length","getRandom","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","minRetries","Error","errorPrefix","particles","find","particle","getDistance","_getRollColor","color","roll","backColor","alter","backFactor","horizontal","vertical","double","backSum","Math","PI","floor","alterHsl","type","_initPosition","zIndexValue","clamp","zLayers","initialPosition","moveCenter","getPosition","center","mode","getParticleDirectionAngle","outType","Vector","_engine","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","particleDestroy","particleDestroyed","updaters","updater","reset","dispatchEvent","delta","drawParticlePlugin","drawParticle","getHslFromAnimation","z","strokeColor","overrideOptions","group","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","loadParticlesOptions","effectType","shapeType","overrideEffectType","load","overrideShapeType","interactivity","Interactivity","pathOptions","path","pathDelay","delay","millisecondsToSeconds","generator","getPathGenerator","addPath","init","initParticle","initParticleNumericAnimationValue","factor","initialVelocity","velocity","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","effectDrawers","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","rangeColorToRgb","shadow","movers","mover","particleInit","particleCreated","isInsideCanvas"],"sourceRoot":""}