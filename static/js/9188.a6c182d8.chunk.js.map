{"version":3,"file":"static/js/9188.a6c182d8.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/Linker.js"],"sourcesContent":["import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            const { CircleWarp } = await import(\"./CircleWarp.js\");\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["origin","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","dx","dy","distance","getDistances","absDiffs","x","Math","abs","y","warpDistances","min","width","height","sqrt","Linker","ParticlesInteractorBase","constructor","container","super","this","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","undefined","id","particles","linksColor","linksColors","get","optColor","color","getLinkRandomColor","blink","consent","set","clear","init","Map","interact","getPosition","canvas","size","linkOpt1","optOpacity","opacity","retina","linksDistance","range","CircleWarp","Circle","query","quadTree","p2","linkOpt2","enable","spawning","destroyed","some","t","destination","opacityLine","push","isEnabled","particle","loadParticlesOptions","Links","_len","arguments","length","sources","Array","_key","source","load","reset"],"sourceRoot":""}