{"version":3,"file":"static/js/1715.b5a7f31f.chunk.js","mappings":"+PACaA,EAAb,0CACI,aAAc,6BACV,gBACKC,MAAO,EAFF,EADlB,mCAKI,SAAKC,GACIA,KAGL,mDAAWA,QACOC,IAAdD,EAAKD,OACLG,KAAKH,KAAOC,EAAKD,WAX7B,GAA+BI,EAAAA,ICAlBC,EAAb,0CACI,aAAc,6BACV,gBACKL,MAAO,EAFF,EADlB,mCAKI,SAAKC,GACIA,KAGL,mDAAWA,QACOC,IAAdD,EAAKD,OACLG,KAAKH,KAAOC,EAAKD,WAX7B,GAAkCI,EAAAA,ICCrBE,EAAb,WACI,cAAc,eACVH,KAAKI,MAAQ,EACbJ,KAAKK,MAAQ,IAAIT,EACjBI,KAAKM,SAAW,IAAIJ,EAJ5B,mCAMI,SAAKJ,GACIA,SAGcC,IAAfD,EAAKM,QACLJ,KAAKI,MAAQN,EAAKM,OAEtBJ,KAAKK,MAAME,KAAKT,EAAKO,OACrBL,KAAKM,SAASC,KAAKT,EAAKQ,eAdhC,KCCaE,EAAb,WACI,WAAYC,IAAW,eACnBT,KAAKS,UAAYA,EAFzB,oEAII,WAAWC,GAAX,4EACUD,EAAYT,KAAKS,UAAWE,EAAmBD,EAASE,QAASC,EAAcF,EAAiBG,KAD1G,wDAKIJ,EAASI,KAAO,CACZT,MAAOI,EAAUM,OAAOC,cAChBC,EAAAA,EAAAA,IAAcJ,EAAYR,MAAMa,QAAUL,EAAYR,MAAMR,KAZnD,GAYqEsB,EAAAA,EAAAA,OAC9EV,EAAUM,OAAOC,aACjBI,EAAAA,GAdL,EAgBHC,UAhBG,EAiBHf,SAAUG,EAAUM,OAAOC,cACnBC,EAAAA,EAAAA,IAAcJ,EAAYP,SAASY,QAAUL,EAAYP,SAAST,KAlBzD,GAkB2EsB,EAAAA,EAAAA,OACpFV,EAAUM,OAAOC,aACjBI,EAAAA,GApBL,EAsBHE,KAtBG,EAuBHlB,MAAOS,EAAYT,OAEnBM,EAASI,KAAKR,UAzBX,IA0BHI,EAASI,KAAKR,UA1BsB,GA4BpCI,EAASI,KAAKV,OA5BX,IA6BHM,EAASI,KAAKV,OA7BsB,GA+BpCM,EAASI,OACTJ,EAASa,SAAWb,EAASI,KAAKT,MAhC/B,GAKX,SA6BUmB,QAAQC,UA7BlB,gDAJJ,8EAmCI,SAAUf,GACN,OAAQA,EAASgB,YApCzB,yBAsCI,SAAYd,GACHA,EAAQE,OACTF,EAAQE,KAAO,IAAIX,GAFM,2BAATwB,EAAS,iCAATA,EAAS,kBAI7B,cAAqBA,EAArB,eAA8B,CAAzB,IAAMC,EAAM,KACbhB,EAAQE,KAAKP,KAAb,OAAkBqB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAQd,SA3CtC,qDA8CI,WAAaJ,EAAUmB,GAAvB,wEACS7B,KAAK8B,UAAUpB,IAAcA,EAASI,KAD/C,iEAIiC,+BAJjC,iBAIYiB,EAJZ,EAIYA,YACGrB,EAAUmB,EAAO7B,KAAKS,UAAUuB,OAAOC,MALtD,gDA9CJ","sources":["../node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js","../node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js","../node_modules/@tsparticles/updater-life/browser/Options/Classes/Life.js","../node_modules/@tsparticles/updater-life/browser/LifeUpdater.js"],"sourcesContent":["import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { LifeDelay } from \"./LifeDelay.js\";\nimport { LifeDuration } from \"./LifeDuration.js\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n","import { getRandom, getRangeValue, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Life } from \"./Options/Classes/Life.js\";\nconst noTime = 0, identity = 1, infiniteValue = -1;\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const { updateLife } = await import(\"./Utils.js\");\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n"],"names":["LifeDelay","sync","data","undefined","this","ValueWithRandom","LifeDuration","Life","count","delay","duration","load","LifeUpdater","container","particle","particlesOptions","options","lifeOptions","life","retina","reduceFactor","getRangeValue","value","getRandom","millisecondsToSeconds","delayTime","time","spawning","Promise","resolve","destroyed","sources","source","delta","isEnabled","updateLife","canvas","size"],"sourceRoot":""}