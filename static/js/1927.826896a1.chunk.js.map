{"version":3,"file":"static/js/1927.826896a1.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/engine/browser/Core/Canvas.js","../node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js","../node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js","../node_modules/@tsparticles/engine/browser/Core/Particle.js","../node_modules/@tsparticles/engine/browser/Core/Utils/Point.js","../node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js","../node_modules/@tsparticles/engine/browser/Core/Particles.js","../node_modules/@tsparticles/engine/browser/Core/Retina.js","../node_modules/@tsparticles/engine/browser/Core/Container.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\nimport { deepExtend, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { generatedAttribute } from \"./Utils/Constants.js\";\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key], defaultValue = 1;\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? defaultValue) * newValue;\n    }\n}\nfunction setStyle(canvas, style, important = false) {\n    if (!style) {\n        return;\n    }\n    const element = canvas;\n    if (!element) {\n        return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n        return;\n    }\n    for (const key in style) {\n        const value = style[key];\n        if (!value) {\n            continue;\n        }\n        elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this._applyPostDrawUpdaters = (particle) => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw?.(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw?.(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize?.();\n            }\n        };\n        this._getPluginParticleColors = (particle) => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = async () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\n            if (color) {\n                const coverRgb = rangeColorToRgb(color);\n                if (coverRgb) {\n                    const coverColor = {\n                        ...coverRgb,\n                        a: cover.opacity,\n                    };\n                    this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n                }\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!cover.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._coverImage = {\n                            image: img,\n                            opacity: cover.opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", (evt) => {\n                        reject(evt.error);\n                    });\n                    img.src = cover.image;\n                });\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._originalStyle = deepExtend({}, element.style);\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            const factorNumerator = 1, opacity = factorNumerator / trail.length;\n            if (trailFill.color) {\n                const fillColor = rangeColorToRgb(trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", (evt) => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = (baseColor) => {\n            this.draw((ctx) => paintBase(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw((ctx) => paintImage(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver((observer) => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver((observer) => observer.observe(element, { attributes: true }));\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n                return;\n            }\n            setStyle(element, originalStyle);\n        };\n        this._safeMutationObserver = (callback) => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            const radix = 10;\n            setStyle(element, {\n                position: \"fixed\",\n                zIndex: this.container.actualOptions.fullScreen.zIndex.toString(radix),\n                top: \"0\",\n                left: \"0\",\n                width: \"100%\",\n                height: \"100%\",\n            }, true);\n        };\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill, minimumLength = 0;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > minimumLength && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else if (options.clear) {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element?.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawAsync(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return undefined;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius(), minimumSize = 0;\n        if (radius <= minimumSize) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactorOffset = 1, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, defaultOpacity = 1, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? defaultOpacity, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => drawParticlePlugin(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => drawPlugin(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        this._mutationObserver = safeMutationObserver((records) => {\n            for (const record of records) {\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        await this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            getLogger().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor ?? plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles ?? updater.getTransformValues ?? updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                if (this._coverImage) {\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\n                }\n                else if (this._coverColorStyle) {\n                    this._paintBase(this._coverColorStyle);\n                }\n                else {\n                    this._paintBase();\n                }\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...size };\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            container.particles.setResizeFactor({\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            });\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw((ctx) => clear(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, safeMatchMedia } from \"../../Utils/Utils.js\";\nimport { millisecondsToSeconds, mouseDownEvent, mouseLeaveEvent, mouseMoveEvent, mouseOutEvent, mouseUpEvent, resizeEvent, touchCancelEvent, touchEndEvent, touchMoveEvent, touchStartEvent, visibilityChangeEvent, } from \"./Constants.js\";\nimport { isBoolean } from \"../../Utils/TypeUtils.js\";\nconst double = 2;\nfunction manageListener(element, event, handler, add, options) {\n    if (add) {\n        let addOptions = { passive: true };\n        if (isBoolean(options)) {\n            addOptions.capture = options;\n        }\n        else if (options !== undefined) {\n            addOptions = options;\n        }\n        element.addEventListener(event, handler, addOptions);\n    }\n    else {\n        const removeOptions = options;\n        element.removeEventListener(event, handler, removeOptions);\n    }\n}\nexport class EventListeners {\n    constructor(container) {\n        this.container = container;\n        this._doMouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions;\n            if (this._canPush) {\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\n                if (!mousePos) {\n                    return;\n                }\n                mouseInteractivity.clickPosition = { ...mousePos };\n                mouseInteractivity.clickTime = new Date().getTime();\n                const onClick = options.interactivity.events.onClick;\n                executeOnSingleOrMultiple(onClick.mode, (mode) => this.container.handleClickMode(mode));\n            }\n            if (e.type === \"touchend\") {\n                const touchDelay = 500;\n                setTimeout(() => this._mouseTouchFinish(), touchDelay);\n            }\n        };\n        this._handleThemeChange = (e) => {\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find((theme) => theme.name === themeName);\n            if (theme && theme.default.auto) {\n                void container.loadTheme(themeName);\n            }\n        };\n        this._handleVisibilityChange = () => {\n            const container = this.container, options = container.actualOptions;\n            this._mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n                return;\n            }\n            if (document && document.hidden) {\n                container.pageHidden = true;\n                container.pause();\n            }\n            else {\n                container.pageHidden = false;\n                if (container.animationStatus) {\n                    void container.play(true);\n                }\n                else {\n                    void container.draw(true);\n                }\n            }\n        };\n        this._handleWindowResize = () => {\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n                delete this._resizeTimeout;\n            }\n            const handleResize = async () => {\n                const canvas = this.container.canvas;\n                await canvas?.windowResize();\n            };\n            this._resizeTimeout = setTimeout(() => void handleResize(), this.container.actualOptions.interactivity.events.resize.delay * millisecondsToSeconds);\n        };\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            const interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n                return;\n            }\n            const html = interactivityEl, canvasEl = container.canvas.element;\n            if (canvasEl) {\n                canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\n            }\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n                return;\n            }\n            manageListener(interactivityEl, mouseMoveEvent, handlers.mouseMove, add);\n            manageListener(interactivityEl, touchStartEvent, handlers.touchStart, add);\n            manageListener(interactivityEl, touchMoveEvent, handlers.touchMove, add);\n            if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEnd, add);\n            }\n            else {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEndClick, add);\n                manageListener(interactivityEl, mouseUpEvent, handlers.mouseUp, add);\n                manageListener(interactivityEl, mouseDownEvent, handlers.mouseDown, add);\n            }\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n            manageListener(interactivityEl, touchCancelEvent, handlers.touchCancel, add);\n        };\n        this._manageListeners = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\n            let mouseLeaveTmpEvent = mouseLeaveEvent;\n            if (detectType === \"window\") {\n                container.interactivity.element = window;\n                mouseLeaveTmpEvent = mouseOutEvent;\n            }\n            else if (detectType === \"parent\" && canvasEl) {\n                container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\n            }\n            else {\n                container.interactivity.element = canvasEl;\n            }\n            this._manageMediaMatch(add);\n            this._manageResize(add);\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n            if (document) {\n                manageListener(document, visibilityChangeEvent, handlers.visibilityChange, add, false);\n            }\n        };\n        this._manageMediaMatch = (add) => {\n            const handlers = this._handlers, mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\");\n            if (!mediaMatch) {\n                return;\n            }\n            if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n                return;\n            }\n            if (mediaMatch.addListener === undefined) {\n                return;\n            }\n            if (add) {\n                mediaMatch.addListener(handlers.oldThemeChange);\n            }\n            else {\n                mediaMatch.removeListener(handlers.oldThemeChange);\n            }\n        };\n        this._manageResize = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            if (!options.interactivity.events.resize) {\n                return;\n            }\n            if (typeof ResizeObserver === \"undefined\") {\n                manageListener(window, resizeEvent, handlers.resize, add);\n                return;\n            }\n            const canvasEl = container.canvas.element;\n            if (this._resizeObserver && !add) {\n                if (canvasEl) {\n                    this._resizeObserver.unobserve(canvasEl);\n                }\n                this._resizeObserver.disconnect();\n                delete this._resizeObserver;\n            }\n            else if (!this._resizeObserver && add && canvasEl) {\n                this._resizeObserver = new ResizeObserver((entries) => {\n                    const entry = entries.find((e) => e.target === canvasEl);\n                    if (!entry) {\n                        return;\n                    }\n                    this._handleWindowResize();\n                });\n                this._resizeObserver.observe(canvasEl);\n            }\n        };\n        this._mouseDown = () => {\n            const { interactivity } = this.container;\n            if (!interactivity) {\n                return;\n            }\n            const { mouse } = interactivity;\n            mouse.clicking = true;\n            mouse.downPosition = mouse.position;\n        };\n        this._mouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\n            mouse.inside = true;\n            let handled = false;\n            const mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n                return;\n            }\n            for (const [, plugin] of container.plugins) {\n                if (!plugin.clickPositionValid) {\n                    continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                this._doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n        };\n        this._mouseTouchFinish = () => {\n            const interactivity = this.container.interactivity;\n            if (!interactivity) {\n                return;\n            }\n            const mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = mouseLeaveEvent;\n            mouse.inside = false;\n            mouse.clicking = false;\n        };\n        this._mouseTouchMove = (e) => {\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\n            if (!interactivity?.element) {\n                return;\n            }\n            interactivity.mouse.inside = true;\n            let pos;\n            if (e.type.startsWith(\"pointer\")) {\n                this._canPush = true;\n                const mouseEvent = e;\n                if (interactivity.element === window) {\n                    if (canvasEl) {\n                        const clientRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.clientX - clientRect.left,\n                            y: mouseEvent.clientY - clientRect.top,\n                        };\n                    }\n                }\n                else if (options.interactivity.detectsOn === \"parent\") {\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\n                    if (source && target && canvasEl) {\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.offsetX + double * sourceRect.left - (targetRect.left + canvasRect.left),\n                            y: mouseEvent.offsetY + double * sourceRect.top - (targetRect.top + canvasRect.top),\n                        };\n                    }\n                    else {\n                        pos = {\n                            x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                            y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                        };\n                    }\n                }\n                else if (mouseEvent.target === canvasEl) {\n                    pos = {\n                        x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                        y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                    };\n                }\n            }\n            else {\n                this._canPush = e.type !== \"touchmove\";\n                if (canvasEl) {\n                    const touchEvent = e, lengthOffset = 1, lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset], canvasRect = canvasEl.getBoundingClientRect(), defaultCoordinate = 0;\n                    pos = {\n                        x: lastTouch.clientX - (canvasRect.left ?? defaultCoordinate),\n                        y: lastTouch.clientY - (canvasRect.top ?? defaultCoordinate),\n                    };\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            if (pos) {\n                pos.x *= pxRatio;\n                pos.y *= pxRatio;\n            }\n            interactivity.mouse.position = pos;\n            interactivity.status = mouseMoveEvent;\n        };\n        this._touchEnd = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchFinish();\n        };\n        this._touchEndClick = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchClick(e);\n        };\n        this._touchStart = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.set(touch.identifier, performance.now());\n            }\n            this._mouseTouchMove(e);\n        };\n        this._canPush = true;\n        this._touches = new Map();\n        this._handlers = {\n            mouseDown: () => this._mouseDown(),\n            mouseLeave: () => this._mouseTouchFinish(),\n            mouseMove: (e) => this._mouseTouchMove(e),\n            mouseUp: (e) => this._mouseTouchClick(e),\n            touchStart: (e) => this._touchStart(e),\n            touchMove: (e) => this._mouseTouchMove(e),\n            touchEnd: (e) => this._touchEnd(e),\n            touchCancel: (e) => this._touchEnd(e),\n            touchEndClick: (e) => this._touchEndClick(e),\n            visibilityChange: () => this._handleVisibilityChange(),\n            themeChange: (e) => this._handleThemeChange(e),\n            oldThemeChange: (e) => this._handleThemeChange(e),\n            resize: () => {\n                this._handleWindowResize();\n            },\n        };\n    }\n    addListeners() {\n        this._manageListeners(true);\n    }\n    removeListeners() {\n        this._manageListeners(false);\n    }\n}\n","export class InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = [];\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            interactor.handleClickMode?.(mode);\n        }\n    }\n    async init() {\n        this._interactors = await this._engine.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case \"external\":\n                    this._externalInteractors.push(interactor);\n                    break;\n                case \"particles\":\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                interactor.interact(particle, delta);\n            }\n        }\n    }\n    reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                interactor.reset(particle);\n            }\n        }\n    }\n}\n","import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            mover.init?.(this);\n        }\n        effectDrawer?.particleInit?.(container, this);\n        shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n","export class Point {\n    constructor(position, particle) {\n        this.position = position;\n        this.particle = particle;\n    }\n}\n","import { Circle, Rectangle } from \"./Ranges.js\";\nimport { getDistance } from \"../../Utils/NumberUtils.js\";\nconst half = 0.5, double = 2, subdivideCount = 4;\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = () => {\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for (let i = 0; i < subdivideCount; i++) {\n                const fixedIndex = i % double;\n                this._subs.push(new QuadTree(new Rectangle(x + width * half * fixedIndex, y + height * half * (Math.round(i * half) - fixedIndex), width * half, height * half), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some((sub) => sub.insert(point));\n    }\n    query(range, check) {\n        const res = [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs) {\n                res.push(...sub.query(range, check));\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n}\n","import { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Ranges.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nconst qTreeCapacity = 4, squareExp = 2, defaultRemoveQuantity = 1;\nconst qTreeRectangle = (canvasSize) => {\n    const { height, width } = canvasSize, posOffset = -0.25, sizeFactor = 1.5;\n    return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._addToPool = (...particles) => {\n            for (const particle of particles) {\n                this._pool.push(particle);\n            }\n        };\n        this._applyDensity = (options, manualCount, group) => {\n            const numberOptions = options.number;\n            if (!options.number.density?.enable) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                }\n                else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, minLimit = 0, optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            }\n            else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container, defaultFactor = 1;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return defaultFactor;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this._pool.pop();\n                if (!particle) {\n                    particle = new Particle(this._engine, this._container);\n                }\n                particle.init(this._nextId, position, overrideOptions, group);\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle), deleteCount = 1;\n            this._array.splice(index, deleteCount);\n            this._zArray.splice(zIdx, deleteCount);\n            particle.destroy(override);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        this._pluginsInitialized = false;\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = [];\n        this.updaters = [];\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const limitOptions = this._container.actualOptions.particles.number.limit, limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit, currentCount = this.count, minLimit = 0;\n        if (limit > minLimit) {\n            if (limitOptions.mode === \"delete\") {\n                const countOffset = 1, minCount = 0, countToRemove = currentCount + countOffset - limit;\n                if (countToRemove > minCount) {\n                    this.removeQuantity(countToRemove);\n                }\n            }\n            else if (limitOptions.mode === \"wait\") {\n                if (currentCount >= limit) {\n                    return;\n                }\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n        this._pluginsInitialized = false;\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        await this.initPlugins();\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for (const group in groups) {\n                const groupOptions = groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    async initPlugins() {\n        if (this._pluginsInitialized) {\n            return;\n        }\n        const container = this._container;\n        this.movers = await this._engine.getMovers(container, true);\n        this.updaters = await this._engine.getUpdaters(container, true);\n        await this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        await this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = defaultRemoveQuantity, group, override) {\n        const minIndex = 0;\n        if (index < minIndex || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            if (this._removeParticle(i--, group, override)) {\n                deleted++;\n            }\n        }\n    }\n    removeQuantity(quantity, group) {\n        const defaultIndex = 0;\n        this.removeAt(defaultIndex, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups, manualCount = 0;\n        for (const group in groups) {\n            this._applyDensity(groups[group], manualCount, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update?.(delta);\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array) {\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                plugin.particleUpdate?.(particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete) {\n                this._engine.dispatchEvent(\"particleRemoved\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            const lengthOffset = 1;\n            this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\n            this._needsSort = false;\n        }\n    }\n}\n","import { getRangeValue } from \"../Utils/NumberUtils.js\";\nimport { isSsr } from \"../Utils/Utils.js\";\nconst defaultRatio = 1, defaultReduceFactor = 1;\nexport class Retina {\n    constructor(container) {\n        this.container = container;\n        this.pixelRatio = defaultRatio;\n        this.reduceFactor = defaultReduceFactor;\n    }\n    init() {\n        const container = this.container, options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || isSsr() ? defaultRatio : window.devicePixelRatio;\n        this.reduceFactor = defaultReduceFactor;\n        const ratio = this.pixelRatio, canvas = container.canvas;\n        if (canvas.element) {\n            const element = canvas.element;\n            canvas.size.width = element.offsetWidth * ratio;\n            canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles, moveOptions = particles.move;\n        this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n        this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n    }\n    initParticle(particle) {\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\n        props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\n        props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\n        props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n    }\n}\n","import { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getLogger, safeIntersectionObserver } from \"../Utils/Utils.js\";\nimport { Canvas } from \"./Canvas.js\";\nimport { EventListeners } from \"./Utils/EventListeners.js\";\nimport { Options } from \"../Options/Classes/Options.js\";\nimport { Particles } from \"./Particles.js\";\nimport { Retina } from \"./Retina.js\";\nimport { getRangeValue } from \"../Utils/NumberUtils.js\";\nimport { loadOptions } from \"../Utils/OptionsUtils.js\";\nfunction guardCheck(container) {\n    return container && !container.destroyed;\n}\nconst defaultFps = 60;\nfunction initDelta(value, fpsLimit = defaultFps, smooth = false) {\n    return {\n        value,\n        factor: smooth ? defaultFps / fpsLimit : (defaultFps * value) / millisecondsToSeconds,\n    };\n}\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\n    const options = new Options(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\nexport class Container {\n    constructor(engine, id, sourceOptions) {\n        this._intersectionManager = (entries) => {\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n                return;\n            }\n            for (const entry of entries) {\n                if (entry.target !== this.interactivity.element) {\n                    continue;\n                }\n                if (entry.isIntersecting) {\n                    void this.play();\n                }\n                else {\n                    this.pause();\n                }\n            }\n        };\n        this._nextFrame = (timestamp) => {\n            try {\n                if (!this._smooth &&\n                    this._lastFrameTime !== undefined &&\n                    timestamp < this._lastFrameTime + millisecondsToSeconds / this.fpsLimit) {\n                    this.draw(false);\n                    return;\n                }\n                this._lastFrameTime ??= timestamp;\n                const delta = initDelta(timestamp - this._lastFrameTime, this.fpsLimit, this._smooth);\n                this.addLifeTime(delta.value);\n                this._lastFrameTime = timestamp;\n                if (delta.value > millisecondsToSeconds) {\n                    this.draw(false);\n                    return;\n                }\n                this.particles.draw(delta);\n                if (!this.alive()) {\n                    this.destroy();\n                    return;\n                }\n                if (this.animationStatus) {\n                    this.draw(false);\n                }\n            }\n            catch (e) {\n                getLogger().error(`${errorPrefix} in animation loop`, e);\n            }\n        };\n        this._engine = engine;\n        this.id = Symbol(id);\n        this.fpsLimit = 120;\n        this._smooth = false;\n        this._delay = 0;\n        this._duration = 0;\n        this._lifeTime = 0;\n        this._firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this._paused = true;\n        this._lastFrameTime = 0;\n        this.zLayers = 100;\n        this.pageHidden = false;\n        this._sourceOptions = sourceOptions;\n        this._initialSourceOptions = sourceOptions;\n        this.retina = new Retina(this);\n        this.canvas = new Canvas(this);\n        this.particles = new Particles(this._engine, this);\n        this.pathGenerators = new Map();\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false,\n            },\n        };\n        this.plugins = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this);\n        this._eventListeners = new EventListeners(this);\n        this._intersectionObserver = safeIntersectionObserver((entries) => this._intersectionManager(entries));\n        this._engine.dispatchEvent(\"containerBuilt\", { container: this });\n    }\n    get animationStatus() {\n        return !this._paused && !this.pageHidden && guardCheck(this);\n    }\n    get options() {\n        return this._options;\n    }\n    get sourceOptions() {\n        return this._sourceOptions;\n    }\n    addClickHandler(callback) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const el = this.interactivity.element;\n        if (!el) {\n            return;\n        }\n        const clickOrTouchHandler = (e, pos, radius) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const pxRatio = this.retina.pixelRatio, posRetina = {\n                x: pos.x * pxRatio,\n                y: pos.y * pxRatio,\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n            callback(e, particles);\n        };\n        const clickHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const mouseEvent = e, pos = {\n                x: mouseEvent.offsetX || mouseEvent.clientX,\n                y: mouseEvent.offsetY || mouseEvent.clientY,\n            }, radius = 1;\n            clickOrTouchHandler(e, pos, radius);\n        };\n        const touchStartHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = true;\n            touchMoved = false;\n        };\n        const touchMoveHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touchMoved = true;\n        };\n        const touchEndHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            if (touched && !touchMoved) {\n                const touchEvent = e;\n                const lengthOffset = 1;\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset];\n                if (!lastTouch) {\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - lengthOffset];\n                    if (!lastTouch) {\n                        return;\n                    }\n                }\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, minCoordinate = 0, pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : minCoordinate),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : minCoordinate),\n                };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        const touchCancelHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        let touched = false, touchMoved = false;\n        el.addEventListener(\"click\", clickHandler);\n        el.addEventListener(\"touchstart\", touchStartHandler);\n        el.addEventListener(\"touchmove\", touchMoveHandler);\n        el.addEventListener(\"touchend\", touchEndHandler);\n        el.addEventListener(\"touchcancel\", touchCancelHandler);\n    }\n    addLifeTime(value) {\n        this._lifeTime += value;\n    }\n    addPath(key, generator, override = false) {\n        if (!guardCheck(this) || (!override && this.pathGenerators.has(key))) {\n            return false;\n        }\n        this.pathGenerators.set(key, generator);\n        return true;\n    }\n    alive() {\n        return !this._duration || this._lifeTime <= this._duration;\n    }\n    destroy() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        this.particles.destroy();\n        this.canvas.destroy();\n        for (const [, effectDrawer] of this.effectDrawers) {\n            effectDrawer.destroy?.(this);\n        }\n        for (const [, shapeDrawer] of this.shapeDrawers) {\n            shapeDrawer.destroy?.(this);\n        }\n        for (const key of this.effectDrawers.keys()) {\n            this.effectDrawers.delete(key);\n        }\n        for (const key of this.shapeDrawers.keys()) {\n            this.shapeDrawers.delete(key);\n        }\n        this._engine.clearPlugins(this);\n        this.destroyed = true;\n        const mainArr = this._engine.dom(), idx = mainArr.findIndex((t) => t === this), minIndex = 0;\n        if (idx >= minIndex) {\n            const deleteCount = 1;\n            mainArr.splice(idx, deleteCount);\n        }\n        this._engine.dispatchEvent(\"containerDestroyed\", { container: this });\n    }\n    draw(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        let refreshTime = force;\n        const frame = (timestamp) => {\n            if (refreshTime) {\n                this._lastFrameTime = undefined;\n                refreshTime = false;\n            }\n            this._nextFrame(timestamp);\n        };\n        this._drawAnimationFrame = requestAnimationFrame((timestamp) => frame(timestamp));\n    }\n    async export(type, options = {}) {\n        for (const [, plugin] of this.plugins) {\n            if (!plugin.export) {\n                continue;\n            }\n            const res = await plugin.export(type, options);\n            if (!res.supported) {\n                continue;\n            }\n            return res.blob;\n        }\n        getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\n    }\n    handleClickMode(mode) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.particles.handleClickMode(mode);\n        for (const [, plugin] of this.plugins) {\n            plugin.handleClickMode?.(mode);\n        }\n    }\n    async init() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const effects = this._engine.getSupportedEffects();\n        for (const type of effects) {\n            const drawer = this._engine.getEffectDrawer(type);\n            if (drawer) {\n                this.effectDrawers.set(type, drawer);\n            }\n        }\n        const shapes = this._engine.getSupportedShapes();\n        for (const type of shapes) {\n            const drawer = this._engine.getShapeDrawer(type);\n            if (drawer) {\n                this.shapeDrawers.set(type, drawer);\n            }\n        }\n        await this.particles.initPlugins();\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        const availablePlugins = await this._engine.getAvailablePlugins(this);\n        for (const [id, plugin] of availablePlugins) {\n            this.plugins.set(id, plugin);\n        }\n        this.retina.init();\n        await this.canvas.init();\n        this.updateActualOptions();\n        this.canvas.initBackground();\n        this.canvas.resize();\n        this.zLayers = this.actualOptions.zLayers;\n        this._duration = getRangeValue(this.actualOptions.duration) * millisecondsToSeconds;\n        this._delay = getRangeValue(this.actualOptions.delay) * millisecondsToSeconds;\n        this._lifeTime = 0;\n        const defaultFpsLimit = 120, minFpsLimit = 0;\n        this.fpsLimit = this.actualOptions.fpsLimit > minFpsLimit ? this.actualOptions.fpsLimit : defaultFpsLimit;\n        this._smooth = this.actualOptions.smooth;\n        for (const [, drawer] of this.effectDrawers) {\n            await drawer.init?.(this);\n        }\n        for (const [, drawer] of this.shapeDrawers) {\n            await drawer.init?.(this);\n        }\n        for (const [, plugin] of this.plugins) {\n            await plugin.init?.();\n        }\n        this._engine.dispatchEvent(\"containerInit\", { container: this });\n        await this.particles.init();\n        this.particles.setDensity();\n        for (const [, plugin] of this.plugins) {\n            plugin.particlesSetup?.();\n        }\n        this._engine.dispatchEvent(\"particlesSetup\", { container: this });\n    }\n    async loadTheme(name) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._currentTheme = name;\n        await this.refresh();\n    }\n    pause() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        if (this._drawAnimationFrame !== undefined) {\n            cancelAnimationFrame(this._drawAnimationFrame);\n            delete this._drawAnimationFrame;\n        }\n        if (this._paused) {\n            return;\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.pause?.();\n        }\n        if (!this.pageHidden) {\n            this._paused = true;\n        }\n        this._engine.dispatchEvent(\"containerPaused\", { container: this });\n    }\n    play(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const needsUpdate = this._paused || force;\n        if (this._firstStart && !this.actualOptions.autoPlay) {\n            this._firstStart = false;\n            return;\n        }\n        if (this._paused) {\n            this._paused = false;\n        }\n        if (needsUpdate) {\n            for (const [, plugin] of this.plugins) {\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n        }\n        this._engine.dispatchEvent(\"containerPlay\", { container: this });\n        this.draw(needsUpdate ?? false);\n    }\n    async refresh() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        return this.start();\n    }\n    async reset() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._initialSourceOptions = undefined;\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        return this.refresh();\n    }\n    async start() {\n        if (!guardCheck(this) || this.started) {\n            return;\n        }\n        await this.init();\n        this.started = true;\n        await new Promise((resolve) => {\n            const start = async () => {\n                this._eventListeners.addListeners();\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n                    this._intersectionObserver.observe(this.interactivity.element);\n                }\n                for (const [, plugin] of this.plugins) {\n                    await plugin.start?.();\n                }\n                this._engine.dispatchEvent(\"containerStarted\", { container: this });\n                this.play();\n                resolve();\n            };\n            this._delayTimeout = setTimeout(() => void start(), this._delay);\n        });\n    }\n    stop() {\n        if (!guardCheck(this) || !this.started) {\n            return;\n        }\n        if (this._delayTimeout) {\n            clearTimeout(this._delayTimeout);\n            delete this._delayTimeout;\n        }\n        this._firstStart = true;\n        this.started = false;\n        this._eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.stop();\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n            this._intersectionObserver.unobserve(this.interactivity.element);\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.stop?.();\n        }\n        for (const key of this.plugins.keys()) {\n            this.plugins.delete(key);\n        }\n        this._sourceOptions = this._options;\n        this._engine.dispatchEvent(\"containerStopped\", { container: this });\n    }\n    updateActualOptions() {\n        this.actualOptions.responsive = [];\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n        this.actualOptions.setTheme(this._currentTheme);\n        if (this._responsiveMaxWidth === newMaxWidth) {\n            return false;\n        }\n        this._responsiveMaxWidth = newMaxWidth;\n        return true;\n    }\n}\n"],"names":["setTransformValue","factor","newFactor","key","newValue","undefined","setStyle","canvas","style","important","arguments","length","elementStyle","value","setProperty","Canvas","constructor","container","this","_applyPostDrawUpdaters","particle","updater","_postDrawUpdaters","afterDraw","_applyPreDrawUpdaters","ctx","radius","zOpacity","colorStyles","transform","_preDrawUpdaters","getColorStyles","fill","stroke","getTransformValues","updaterTransform","beforeDraw","_applyResizePlugins","plugin","_resizePlugins","resize","_getPluginParticleColors","fColor","sColor","_colorPlugins","particleFillColor","rangeColorToHsl","particleStrokeColor","_initCover","async","cover","actualOptions","backgroundMask","color","coverRgb","rangeColorToRgb","coverColor","a","opacity","_coverColorStyle","getStyleFromRgb","Promise","resolve","reject","image","img","document","createElement","addEventListener","_coverImage","evt","error","src","_initStyle","element","options","_fullScreen","_originalStyle","deepExtend","_setFullScreenStyle","_resetOriginalStyle","_initTrail","trail","particles","move","trailFill","enable","fillColor","_trailFill","_paintBase","baseColor","draw","paintBase","size","_paintImage","paintImage","_repairStyle","_safeMutationObserver","observer","disconnect","initBackground","observe","attributes","originalStyle","callback","_mutationObserver","position","zIndex","fullScreen","toString","top","left","width","height","_context","_generated","clear","paint","destroy","stop","remove","cb","drawAsync","drawParticle","delta","spawning","destroyed","getRadius","pfColor","getFillColor","psColor","getStrokeColor","zIndexOptions","zIndexFactor","zOpacityFactor","opacityRate","bubble","zStrokeOpacity","strokeOpacity","getStyleFromHsl","context","composite","sizeRate","shadow","drawParticlePlugin","drawPlugin","init","obs","safeMutationObserver","records","record","type","attributeName","e","getLogger","initUpdaters","initPlugins","background","backgroundColor","backgroundImage","backgroundPosition","backgroundRepeat","repeat","backgroundSize","plugins","push","updaters","loadCanvas","dataset","generatedAttribute","ariaHidden","offsetHeight","offsetWidth","getContext","retina","pxRatio","pixelRatio","newSize","oldSize","started","setResizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","refresh","manageListener","event","handler","add","addOptions","passive","isBoolean","capture","removeOptions","removeEventListener","EventListeners","_doMouseTouchClick","_canPush","mouseInteractivity","interactivity","mouse","mousePos","clickPosition","clickTime","Date","getTime","onClick","events","executeOnSingleOrMultiple","mode","handleClickMode","setTimeout","_mouseTouchFinish","_handleThemeChange","mediaEvent","defaultThemes","themeName","matches","dark","light","theme","themes","find","name","default","auto","loadTheme","_handleVisibilityChange","pauseOnBlur","hidden","pageHidden","pause","animationStatus","play","_handleWindowResize","_resizeTimeout","clearTimeout","handleResize","delay","millisecondsToSeconds","_manageInteractivityListeners","mouseLeaveTmpEvent","handlers","_handlers","interactivityEl","html","canvasEl","pointerEvents","onHover","mouseMoveEvent","mouseMove","touchStartEvent","touchStart","touchMoveEvent","touchMove","touchEndEvent","touchEndClick","mouseUpEvent","mouseUp","mouseDownEvent","mouseDown","touchEnd","mouseLeave","touchCancelEvent","touchCancel","_manageListeners","detectType","detectsOn","mouseLeaveEvent","window","mouseOutEvent","parentElement","parentNode","_manageMediaMatch","_manageResize","visibilityChangeEvent","visibilityChange","mediaMatch","safeMatchMedia","addListener","oldThemeChange","removeListener","themeChange","ResizeObserver","resizeEvent","_resizeObserver","unobserve","entries","target","_mouseDown","clicking","downPosition","_mouseTouchClick","inside","handled","mousePosition","clickPositionValid","status","_mouseTouchMove","pos","startsWith","mouseEvent","clientRect","getBoundingClientRect","x","clientX","y","clientY","source","currentTarget","sourceRect","targetRect","canvasRect","offsetX","offsetY","touchEvent","lengthOffset","lastTouch","touches","defaultCoordinate","_touchEnd","Array","from","changedTouches","touch","_touches","delete","identifier","_touchEndClick","_touchStart","set","performance","now","Map","addListeners","removeListeners","InteractionManager","engine","_engine","_interactors","_externalInteractors","_particleInteractors","externalInteract","interactor","isEnabled","interact","getInteractors","particlesInteract","reset","half","fixOutMode","data","isInArray","outMode","checkModes","diameter","coord","maxCoord","setCb","Particle","_this","_calcPosition","tryCount","pluginPos","particlePosition","Vector3d","create","canvasSize","exactPosition","calcExactPositionOrRandomFromSize","outModes","fixHorizontal","fixVertical","right","bottom","_checkOverlap","increment","_calculateVelocity","res","getParticleBaseVelocity","direction","copy","moveOptions","rad","degToRad","getRangeValue","angle","radOffset","offset","range","straight","randomInRange","setRangeValue","random","speed","getRandom","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","errorPrefix","getDistance","_getRollColor","roll","backColor","alter","backFactor","horizontal","vertical","double","backSum","Math","PI","floor","alterHsl","_initPosition","zIndexValue","clamp","zLayers","initialPosition","moveCenter","getPosition","center","getParticleDirectionAngle","outType","Vector","origin","override","unbreakable","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","shape","particleDestroy","particleDestroyed","dispatchEvent","getHslFromAnimation","getMass","z","strokeColor","id","overrideOptions","group","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","maxDistance","ignoresResizeRatio","mainOptions","particlesOptions","loadParticlesOptions","effectType","effect","shapeType","reduceDuplicates","itemFromSingleOrMultiple","effectOptions","shapeOptions","overrideEffectType","load","overrideShapeType","effectData","close","loadEffectData","shapeData","loadShapeData","Interactivity","pathOptions","path","pathDelay","generator","getPathGenerator","addPath","initParticle","initParticleNumericAnimationValue","initialVelocity","velocity","moveDecay","decay","setLastZIndex","sides","effectDrawer","effectDrawers","getEffectDrawer","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","shadowColor","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible","Point","QuadTree","rectangle","capacity","_subdivide","i","fixedIndex","_subs","Rectangle","round","_divided","_points","insert","point","contains","some","sub","query","check","intersects","p","queryCircle","Circle","queryRectangle","qTreeRectangle","Particles","_addToPool","_len","_key","_pool","_applyDensity","manualCount","numberOptions","number","density","_limit","limit","_groupLimits","densityFactor","_initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","min","particlesCount","count","filter","t","abs","removeQuantity","densityOptions","_container","_pushParticle","initializer","pop","_nextId","canAdd","_array","_zArray","warning","_removeParticle","index","zIdx","indexOf","splice","_needsSort","_lastZIndex","_interactionManager","_pluginsInitialized","quadTree","addManualParticles","manualParticles","addParticle","limitOptions","currentCount","countToRemove","update","condition","particlesInitialization","groups","groupOptions","j","getMovers","getUpdaters","pathGenerators","nb","redraw","removeAt","quantity","deleted","_resizeFactor","particlesToDelete","Set","resizeFactor","particleUpdate","checkDelete","has","zArray","sort","b","Retina","reduceFactor","detectRetina","isSsr","devicePixelRatio","ratio","maxSpeed","gravity","sizeAnimationSpeed","animation","moveDistance","distance","props","moveDrift","drift","moveSpeed","guardCheck","loadContainerOptions","Options","sourceOptionsArr","loadOptions","Container","sourceOptions","_intersectionManager","pauseOnOutsideViewport","entry","isIntersecting","_nextFrame","timestamp","_smooth","_lastFrameTime","fpsLimit","initDelta","addLifeTime","alive","Symbol","_delay","_duration","_lifeTime","_firstStart","_paused","_sourceOptions","_initialSourceOptions","_options","_eventListeners","_intersectionObserver","safeIntersectionObserver","addClickHandler","el","clickOrTouchHandler","posRetina","touched","touchMoved","touchStartHandler","touchMoveHandler","minCoordinate","max","radiusX","radiusY","touchCancelHandler","keys","clearPlugins","mainArr","dom","idx","findIndex","deleteCount","force","refreshTime","frame","_drawAnimationFrame","requestAnimationFrame","export","supported","blob","effects","getSupportedEffects","drawer","shapes","getSupportedShapes","availablePlugins","getAvailablePlugins","duration","smooth","particlesSetup","_currentTheme","cancelAnimationFrame","needsUpdate","autoPlay","start","HTMLElement","_delayTimeout","responsive","newMaxWidth","setResponsive","setTheme","_responsiveMaxWidth"],"sourceRoot":""}