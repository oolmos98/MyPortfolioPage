{"version":3,"file":"static/js/1795.83d6c7f0.chunk.js","mappings":"uNAEaA,EAAb,WACI,WAAYC,IAAW,eACnBC,KAAKD,UAAYA,EACjBC,KAAKC,MAAQ,CAAC,QAHtB,sEAKI,WAAaC,EAAUC,EAAWC,EAAOC,GAAzC,kFACSL,KAAKC,MAAMK,SAASD,GAD7B,gEAISH,EAASK,QAAQC,KAAKC,SAASC,aACjB,SAAdP,GAAsC,UAAdA,UALjC,QAMSD,EAASK,QAAQC,KAAKC,SAASE,WACb,QAAdR,GAAqC,WAAdA,IAPpC,oDAUUS,EAAiBV,EAASK,QAAQC,KAAKK,QAASd,EAAYC,KAAKD,UAAWe,EAAaf,EAAUgB,OAAOC,KAAMC,EAAUf,EAASgB,YACpIN,EAAeO,OAXxB,sBAYajB,EAASkB,SAASC,EAlBf,GAkBkCnB,EAASoB,SAASD,GAAKP,EAAWS,OAASN,GAChFf,EAASkB,SAASC,EAnBf,GAmBkCnB,EAASoB,SAASD,IAAMJ,GAC7Df,EAASkB,SAASI,EApBf,GAoBkCtB,EAASoB,SAASE,GAAKV,EAAWW,MAAQR,GAC/Ef,EAASkB,SAASI,EArBf,GAqBkCtB,EAASoB,SAASE,IAAMP,GAf1E,kDAkBaS,EAAAA,EAAAA,IAAcxB,EAASoB,SAAUvB,EAAUgB,OAAOC,KAAMW,EAAAA,GAAAA,OAAeV,EAASd,IACjFJ,EAAU6B,UAAUC,OAAO3B,GAnBvC,wBAuBcoB,EAAWpB,EAASoB,WACpBV,EAAekB,SACjBR,EAASD,EAAIP,EAAWS,OAASN,GACnB,WAAdd,GACCS,EAAekB,SAAWR,EAASD,GAAKJ,GAAyB,QAAdd,IACpDJ,EAAU6B,UAAUC,OAAO3B,GA5BvC,yBA+BU6B,QAAQC,UA/BlB,iDALJ","sources":["../node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js"],"sourcesContent":["import { Vector, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    async update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ??\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n        await Promise.resolve();\n    }\n}\n"],"names":["NoneOutMode","container","this","modes","particle","direction","delta","outMode","includes","options","move","distance","horizontal","vertical","gravityOptions","gravity","canvasSize","canvas","size","pRadius","getRadius","enable","velocity","y","position","height","x","width","isPointInside","Vector","particles","remove","inverse","Promise","resolve"],"sourceRoot":""}