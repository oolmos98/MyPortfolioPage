{"version":3,"file":"static/js/186.93fa7d0c.chunk.js","mappings":"gPAAO,SAAeA,EAAtB,wC,sCAAO,WAAgCC,EAAIC,EAAIC,EAAOC,GAA/C,8EACKH,EAAGI,QAAQC,WAAWC,KAD3B,OAEM,WAFN,OAOM,WAPN,OAYM,YAZN,wCAG8B,+BAH9B,wBAGaC,EAHb,EAGaA,QACDP,EAAIC,EAAIC,EAAOC,GAJ3B,6CAQ8B,+BAR9B,yBAQaK,EARb,EAQaA,QACDR,EAAIC,GAThB,8CAa+B,+BAb/B,yBAaaQ,EAbb,EAaaA,SACAT,EAAIC,GAdjB,kE,sBCEP,IACaS,EAAb,0CACI,WAAYC,GAAW,kCACbA,GAFd,oCAII,cAJJ,kBAMI,cANJ,uDAQI,WAAeX,EAAIE,GAAnB,yFACQF,EAAGY,YAAaZ,EAAGa,SAD3B,iDAIUF,EAAYG,KAAKH,UAAWI,EAAOf,EAAGgB,cAAeC,EAAUjB,EAAGkB,YAAaC,EAAQR,EAAUS,UAAUC,SAASC,YAAYP,EAb/H,EAaqIE,GAJhJ,UAKqBE,GALrB,4DAKelB,EALf,QAMYD,IAAOC,GACNA,EAAGG,QAAQC,WAAWkB,QACvBvB,EAAGI,QAAQC,WAAWC,OAASL,EAAGG,QAAQC,WAAWC,OACrDL,EAAGW,YACHX,EAAGY,SAVf,2DAacW,EAAOvB,EAAGe,cAAeS,EAAUxB,EAAGiB,cACxCQ,KAAKC,IAAID,KAAKE,MAAMb,EAAKc,GAAKH,KAAKE,MAAMJ,EAAKK,IAAMZ,EAAUQ,GAd1E,8DAiBqBK,EAAAA,EAAAA,IAAYf,EAAMS,GAAeP,EAAUQ,GAjBhE,yEAqBc1B,EAAiBC,EAAIC,EAAIC,EAAOS,EAAUoB,OAAO5B,YArB/D,uMARJ,gFAgCI,SAAU6B,GACN,OAAOA,EAAS5B,QAAQC,WAAWkB,SAjC3C,mBAmCI,gBAnCJ,GAA8BU,EAAAA","sources":["../node_modules/@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js","../node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js"],"sourcesContent":["export async function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            const { absorb } = await import(\"./Absorb.js\");\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            const { bounce } = await import(\"./Bounce.js\");\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            const { destroy } = await import(\"./Destroy.js\");\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            await resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n"],"names":["resolveCollision","p1","p2","delta","pixelRatio","options","collisions","mode","absorb","bounce","destroy","Collider","container","destroyed","spawning","this","pos1","getPosition","radius1","getRadius","query","particles","quadTree","queryCircle","enable","pos2","radius2","Math","abs","round","z","getDistance","retina","particle","ParticlesInteractorBase"],"sourceRoot":""}