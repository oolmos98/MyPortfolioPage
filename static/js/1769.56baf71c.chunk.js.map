{"version":3,"file":"static/js/1769.56baf71c.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    async draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            await canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        await canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    async init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                await this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            await effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            await shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            await updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            await mover.init?.(this);\n        }\n        await effectDrawer?.particleInit?.(container, this);\n        await shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n"],"names":["half","fixOutMode","data","isInArray","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","container","_this","this","_calcPosition","position","zIndex","tryCount","arguments","length","undefined","plugin","plugins","pluginPos","particlePosition","Vector3d","create","x","y","canvasSize","canvas","size","exactPosition","calcExactPositionOrRandomFromSize","pos","getRadius","outModes","options","move","fixHorizontal","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","increment","_calculateVelocity","res","getParticleBaseVelocity","direction","copy","moveOptions","rad","degToRad","getRangeValue","angle","radOffset","offset","range","straight","randomInRange","setRangeValue","random","speed","getRandom","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","Error","errorPrefix","particles","find","particle","getDistance","_getRollColor","color","roll","backColor","alter","backFactor","horizontal","vertical","double","backSum","Math","PI","floor","alterHsl","type","_initPosition","zIndexValue","clamp","zLayers","initialPosition","moveCenter","getPosition","center","mode","getParticleDirectionAngle","outType","Vector","origin","_engine","destroy","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","shape","particleDestroy","particleDestroyed","updater","updaters","reset","dispatchEvent","draw","delta","drawParticlePlugin","drawParticle","getFillColor","getHslFromAnimation","getMass","z","getStrokeColor","strokeColor","init","id","overrideOptions","group","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","loadParticlesOptions","effectType","effect","shapeType","reduceDuplicates","itemFromSingleOrMultiple","effectOptions","shapeOptions","overrideEffectType","load","overrideShapeType","effectData","deepExtend","close","fill","loadEffectData","shapeData","loadShapeData","interactivity","Interactivity","pathOptions","path","pathDelay","delay","millisecondsToSeconds","generator","getPathGenerator","addPath","initParticle","initParticleNumericAnimationValue","factor","initialVelocity","velocity","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","effectDrawers","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","rangeColorToRgb","shadow","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible"],"sourceRoot":""}