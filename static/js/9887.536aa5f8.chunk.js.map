{"version":3,"file":"static/js/9887.536aa5f8.chunk.js","mappings":"8NAEaA,EAAb,WACI,WAAYC,IAAW,eACnBC,KAAKD,UAAYA,EAFzB,oEAII,WAAWE,GAAX,wFACUF,EAAYC,KAAKD,UAAWG,EAAUD,EAASC,QAC/CC,GAASC,EAAAA,EAAAA,IAAyBF,EAAQC,OAAQF,EAASI,GAAIH,EAAQI,kBAC7EL,EAASM,aAAcC,EAAAA,EAAAA,IAAcL,EAAOM,OAASV,EAAUW,OAAOC,WACtEV,EAASW,eAAgBJ,EAAAA,EAAAA,IAAa,UAACL,EAAOU,eAAR,QATvB,GAUfZ,EAASa,gBAAT,UAA2BX,EAAOY,aAAlC,aAA2B,EAAcC,WACnCC,EANV,WAM2BC,EAAAA,EAAAA,IAAgBf,EAAOY,cANlD,QAM4Dd,EAASkB,kBAE7DlB,EAASmB,aAAcC,EAAAA,EAAAA,IAAuBJ,EAAgBhB,EAASa,gBAAiBf,EAAUW,OAAOY,eARjH,SAUUC,QAAQC,UAVlB,gDAJJ,8EAgBI,SAAUvB,GACA,IAAAc,EAAQd,EAASa,gBAAmBM,EAAgBnB,EAAhBmB,YAC1C,OAASnB,EAASwB,YACbxB,EAASyB,YACRX,SACyBY,KAAd,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAaQ,EAAEC,QAAuBT,EAAYQ,EAAEE,aACxBH,KAAd,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAaW,EAAEF,QAAuBT,EAAYW,EAAED,aAC3BH,KAAd,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAaY,EAAEH,QAAuBT,EAAYY,EAAEF,UAvBrE,qDAyBI,WAAa7B,EAAUgC,GAAvB,kEACSjC,KAAKkC,UAAUjC,GADxB,wDAIIkC,EAAAA,EAAAA,IAAYlC,EAASmB,YAAaa,GAJtC,SAKUV,QAAQC,UALlB,gDAzBJ","sources":["../node_modules/@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js"],"sourcesContent":["import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nconst defaultOpacity = 1;\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateColor(particle.strokeColor, delta);\n        await Promise.resolve();\n    }\n}\n"],"names":["StrokeColorUpdater","container","this","particle","options","stroke","itemFromSingleOrMultiple","id","reduceDuplicates","strokeWidth","getRangeValue","width","retina","pixelRatio","strokeOpacity","opacity","strokeAnimation","color","animation","strokeHslColor","rangeColorToHsl","getFillColor","strokeColor","getHslAnimationFromHsl","reduceFactor","Promise","resolve","destroyed","spawning","undefined","h","value","enable","s","l","delta","isEnabled","updateColor"],"sourceRoot":""}